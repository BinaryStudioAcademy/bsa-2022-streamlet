name: Continuous Integration

on:
  pull_request:
    branches:
      - development
      - production

  workflow_dispatch:

jobs:
  test:
    name: streamlet test
    runs-on: ubuntu-latest
    env:
      DB_NAME: streamlet
      DB_USER: postgres
      DB_PASSWORD: admin

      API_BASE_PREFIX: /api/test
      NODE_ENV: development
      HOST: localhost
      RABBITMQ_HOST: localhost
      PORT: 5001
      RABBITMQ_PORT: 5672

      DATABASE_URL: "postgresql://postgres:admin@localhost:5432/streamlet"

      CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
      CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
      CLOUDINARY_NAME: ${{ secrets.CLOUDINARY_NAME }}

      MAIL_LOGIN: ${{ secrets.MAIL_LOGIN }}
      MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}

      ACCESS_TOKEN_SECRET: secret0
      REFRESH_SECRET: secret1
      RESET_PASSWORD_TOKEN_SECRET: secret2
      VERIFICATION_TOKEN_SECRET: secret3

      GOOGLE_CLIENT_ID_GSI: ${{ secrets.GOOGLE_CLIENT_ID_GSI }}
      GOOGLE_SECRET_GSI: ${{ secrets.GOOGLE_SECRET_GSI }}

      CLIENT_URL: "http://localhost:3000"
    services:
      db:
        image: postgres:14.5
        env:
          POSTGRES_DB: ${{ env.DB_NAME }}
          POSTGRES_USER: ${{ env.DB_USER }}
          POSTGRES_PASSWORD: ${{ env.DB_PASSWORD }}
        ports:
          - 5432:5432
      rabbitMq:
        image: rabbitmq:3-management-alpine
        ports:
          - 5672:5672
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v2

      - name: Install NodeJS
        uses: actions/setup-node@v2
        with:
          node-version-file: .nvmrc

      - name: Install Dependencies
        run: npm install

      - name: Code Linting
        run: npm run lint --max-warnings=0

      - name: Migrate and Seed Database
        run: |
          npm run migrate
          npm run seed:soft -w backend/core

      - name: Start backend
        run: npm run start:backend & npx wait-on $(echo tcp:localhost:$PORT)

      - name: Run integration tests
        run: npm test -w backend/core

      - name: Run ent-to-end API tests
        env:
          TESTS_ENV_NAME: "development"
          TESTS_BASE_URL: "http://localhost:5001/api/test/"
          TESTS_SWAGGER_URL: "https://localhost:5001/api-docs/"
          TESTS_USER_EMAIL: "alsan@mailsac.com"
          TESTS_USER_PASSWORD: "Test-1234"
        run: npm run api:tests:ci -w tests

  build-backend:
    name: streamlet build backend.Dockerfile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v2

      - name: Build backend Dockerfile
        run: docker build -f .docker/backend.Dockerfile -t backend .
  build-push-server:
    name: streamlet build push.Dockerfile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v2

      - name: Build push Dockerfile
        run: docker build -f .docker/push.Dockerfile -t push .
  build-video-transcoding-server:
    name: streamlet build video-transcoding-server.Dockerfile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v2

      - name: Build push Dockerfile
        run: docker build -f .docker/video-transcoding-server.Dockerfile -t video-transcoding-server .
  build-frontend:
    name: streamlet build frontend.Dockerfile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v2

      - name: Build backend Dockerfile Dockerfile
        run: docker build --build-arg REACT_APP_API_ORIGIN_URL=/api/v1 -f .docker/frontend.Dockerfile -t frontend .

