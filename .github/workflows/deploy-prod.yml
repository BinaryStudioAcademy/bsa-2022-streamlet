name: Deploy production

on:
  push:
    branches:
      - production
  workflow_dispatch:

jobs:
  build-backend:
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout project
        uses: actions/checkout@v2

      - name: Build image
        uses: whoan/docker-build-with-cache-action@v5
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          image_name: streamlet-backend
          registry: ghcr.io
          image_tag: latest
          context: ./
          dockerfile: ./.docker/backend.Dockerfile
  build-push-server:
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout project
        uses: actions/checkout@v2

      - name: Build image
        uses: whoan/docker-build-with-cache-action@v5
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          image_name: streamlet-push
          registry: ghcr.io
          image_tag: latest
          context: ./
          dockerfile: ./.docker/push.Dockerfile
  build-video-transcoding-server:
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout project
        uses: actions/checkout@v2

      - name: Build image
        uses: whoan/docker-build-with-cache-action@v5
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          image_name: streamlet-video-transcoding-server
          registry: ghcr.io
          image_tag: latest
          context: ./
          dockerfile: ./.docker/video-transcoding-server.Dockerfile
  build-frontend:
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build image
        uses: whoan/docker-build-with-cache-action@v5
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          image_name: streamlet-frontend
          registry: ghcr.io
          image_tag: latest
          context: ./
          dockerfile: ./.docker/frontend.Dockerfile
          build_extra_args: "--build-arg=REACT_APP_API_ORIGIN_URL=${{ secrets.REACT_APP_API_ORIGIN_URL }} --build-arg=REACT_APP_SERVER_HOST=${{ secrets.REACT_APP_SERVER_HOST_PROD }} --build-arg=REACT_APP_VIDEO_FALLBACK_BASE_URL=${{ secrets.REACT_APP_VIDEO_FALLBACK_BASE_URL_PROD }}"

  deploy:
    needs: [build-backend, build-frontend, build-push-server, build-video-transcoding-server]
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Copy docker-compose.dev.yml to deployment server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DEPLOYMENT_HOST_PROD }}
          username: ${{ secrets.DEPLOYMENT_USERNAME_PROD }}
          password: ${{ secrets.DEPLOYMENT_SSH_PASSWORD_PROD }}
          source: ".docker/docker-compose.prod.yml,.docker/healthcheck.sh,nginx/nginx.rtmp.conf,backend/core/prisma"
          target: app

      - name: Run docker-compose.prod.yml on production server
        uses: appleboy/ssh-action@master
        env:
          GITHUB_USERNAME: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          host: ${{ secrets.DEPLOYMENT_HOST }}
          username: ${{ secrets.DEPLOYMENT_USERNAME }}
          password: ${{ secrets.DEPLOYMENT_SSH_PASSWORD }}
          envs: GITHUB_USERNAME,GITHUB_TOKEN
          script: |
            cd app/.docker/
            export GITHUB_USERNAME=$GITHUB_USERNAME
            export GITHUB_TOKEN=$GITHUB_TOKEN
            echo "$GITHUB_TOKEN" | sudo docker login ghcr.io -u $GITHUB_USERNAME --password-stdin
            sudo docker compose -f docker-compose.prod.yml rm --force --stop
            sudo docker compose -f docker-compose.prod.yml pull
            sudo docker compose -f docker-compose.prod.yml --env-file ../.env/healthcheck.env up -d
            sudo chmod +x healthcheck.sh
            sudo ./healthcheck.sh

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    environment: development
    steps:
      - name: Trigger this job at the end of workflow
        uses: technote-space/workflow-conclusion-action@v2

      - name: Slack Notification
        if: always()
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_USERNAME: Deployment Bot - PRODUCTION
          SLACK_ICON: https://i.imgur.com/JELO6xS.png
          SLACK_MESSAGE: "Deployment finished with ${{ env.WORKFLOW_CONCLUSION == 'success' && 'Success ðŸŸ¢' || env.WORKFLOW_CONCLUSION == 'cancelled' && 'Cancelled ðŸŸ¡' || env.WORKFLOW_CONCLUSION == 'skipped' && 'Skipped ðŸ”µ' || 'Error ðŸ”´' }} result"
          SLACK_FOOTER: "Git branch: `production`"
          MSG_MINIMAL: event,actions url
