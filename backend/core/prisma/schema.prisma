// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// NOTES:
// - all optional String columns are non-null and defaulted to ""
// in order to leave only one way of representing the lack of value
// - in postgres there is little to no performance difference between varchar(n) and text
// so the only reason of using varchar(n) is to duplicate validation logic on db level

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  username           String              @unique
  email              String              @unique
  password           String
  isActivated        Boolean             @default(false)
  refreshToken       RefreshToken?
  resetPasswordToken ResetPasswordToken?
  comments           VideoComment[]
  channels           Channel[]
  subscriptions      Subscription[]
  chatMessages       ChatMessage[]
  notifications      Notification[]
  profile            UserProfile?
  historyRecords     History[]
  videoPreferences   Category[]
  reactions          Reaction[]
  commentReactions   CommentReaction[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model UserProfile {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  avatar    String   @default("")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String
  // assuming there should be at most one token for a user at any given time
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ResetPasswordToken {
  id        String   @id @default(uuid())
  token     String
  // assuming there should be at most one token for a user at any given time
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum StreamingStatus {
  pending
  ready
  live
  finished
}

model Video {
  id                  String          @id @default(uuid())
  name                String
  description         String          @default("")
  status              StreamingStatus @default(pending)
  publishedAt         DateTime        @default(now())
  scheduledStreamDate DateTime        @default(now())
  poster              String          @default("")
  duration            Int             @default(0)
  videoPath           String
  liveViews           Int             @default(0)
  videoViews          Int             @default(0)
  tags                Tag[]
  categories          Category[]
  comments            VideoComment[]
  channel             Channel         @relation(fields: [channelId], references: [id])
  channelId           String
  isChatEnabled       Boolean         @default(true)
  chatMessages        ChatMessage[]
  notifications       Notification[]
  historyRecords      History[]
  reactions           Reaction[]
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  videos    Video[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id         String   @id @default(uuid())
  name       String   @unique
  posterPath String?
  videos     Video[]
  users      User[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model VideoComment {
  id        String   @id @default(uuid())
  text      String
  video     Video    @relation(fields: [videoId], references: [id])
  videoId   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  commentReactions CommentReaction[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Channel {
  id            String         @id @default(uuid())
  name          String
  avatar        String         @default("")
  description   String         @default("")
  videos        Video[]
  contactEmail  String         @default("")
  bannerImage   String         @default("")
  author        User           @relation(fields: [authorId], references: [id])
  authorId      String
  streamingKeys StreamingKey[]
  subscriptions Subscription[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model StreamingKey {
  id        String  @id @default(uuid())
  key       String  @unique @default(uuid())
  channel   Channel @relation(fields: [channelId], references: [id])
  channelId String  @unique
}

model Subscription {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  channel   Channel  @relation(fields: [channelId], references: [id])
  channelId String
  notify    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, channelId])
}

model ChatMessage {
  id        String   @id @default(uuid())
  text      String
  video     Video    @relation(fields: [videoId], references: [id])
  videoId   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String   @id @default(uuid())
  text      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  video     Video    @relation(fields: [videoId], references: [id])
  videoId   String
  viewed    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, videoId])
}

model History {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  video     Video    @relation(fields: [videoId], references: [id])
  videoId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reaction {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  video     Video    @relation(fields: [videoId], references: [id])
  videoId   String
  isLike    Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, videoId])
}

model CommentReaction {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   VideoComment @relation(fields: [commentId], references: [id])
  commentId String
  isLike    Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, commentId])
}
